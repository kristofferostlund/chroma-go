// Package chromaclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package chromaclient

import (
	"encoding/json"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for GetEmbeddingInclude.
const (
	GetEmbeddingIncludeDistances  GetEmbeddingInclude = "distances"
	GetEmbeddingIncludeDocuments  GetEmbeddingInclude = "documents"
	GetEmbeddingIncludeEmbeddings GetEmbeddingInclude = "embeddings"
	GetEmbeddingIncludeMetadatas  GetEmbeddingInclude = "metadatas"
)

// Defines values for QueryEmbeddingInclude.
const (
	QueryEmbeddingIncludeDistances  QueryEmbeddingInclude = "distances"
	QueryEmbeddingIncludeDocuments  QueryEmbeddingInclude = "documents"
	QueryEmbeddingIncludeEmbeddings QueryEmbeddingInclude = "embeddings"
	QueryEmbeddingIncludeMetadatas  QueryEmbeddingInclude = "metadatas"
)

// AddEmbedding defines model for AddEmbedding.
type AddEmbedding struct {
	Documents      *[]string                 `json:"documents,omitempty"`
	Embeddings     *[]map[string]interface{} `json:"embeddings,omitempty"`
	Ids            []string                  `json:"ids"`
	IncrementIndex *bool                     `json:"increment_index,omitempty"`
	Metadatas      *[]map[string]interface{} `json:"metadatas,omitempty"`
}

// CreateCollection defines model for CreateCollection.
type CreateCollection struct {
	GetOrCreate *bool                   `json:"get_or_create,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        string                  `json:"name"`
}

// DeleteEmbedding defines model for DeleteEmbedding.
type DeleteEmbedding struct {
	Ids           *[]string               `json:"ids,omitempty"`
	Where         *map[string]interface{} `json:"where,omitempty"`
	WhereDocument *map[string]interface{} `json:"where_document,omitempty"`
}

// GetEmbedding defines model for GetEmbedding.
type GetEmbedding struct {
	Ids           *[]string               `json:"ids,omitempty"`
	Include       *[]GetEmbeddingInclude  `json:"include,omitempty"`
	Limit         *int                    `json:"limit,omitempty"`
	Offset        *int                    `json:"offset,omitempty"`
	Sort          *string                 `json:"sort,omitempty"`
	Where         *map[string]interface{} `json:"where,omitempty"`
	WhereDocument *map[string]interface{} `json:"where_document,omitempty"`
}

// GetEmbeddingInclude defines model for GetEmbedding.Include.
type GetEmbeddingInclude string

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// QueryEmbedding defines model for QueryEmbedding.
type QueryEmbedding struct {
	Include         *[]QueryEmbeddingInclude `json:"include,omitempty"`
	NResults        *int                     `json:"n_results,omitempty"`
	QueryEmbeddings []map[string]interface{} `json:"query_embeddings"`
	Where           *map[string]interface{}  `json:"where,omitempty"`
	WhereDocument   *map[string]interface{}  `json:"where_document,omitempty"`
}

// QueryEmbeddingInclude defines model for QueryEmbedding.Include.
type QueryEmbeddingInclude string

// RawSql defines model for RawSql.
type RawSql struct {
	RawSql string `json:"raw_sql"`
}

// UpdateCollection defines model for UpdateCollection.
type UpdateCollection struct {
	NewMetadata *map[string]interface{} `json:"new_metadata,omitempty"`
	NewName     *string                 `json:"new_name,omitempty"`
}

// UpdateEmbedding defines model for UpdateEmbedding.
type UpdateEmbedding struct {
	Documents      *[]string                 `json:"documents,omitempty"`
	Embeddings     *[]map[string]interface{} `json:"embeddings,omitempty"`
	Ids            []string                  `json:"ids"`
	IncrementIndex *bool                     `json:"increment_index,omitempty"`
	Metadatas      *[]map[string]interface{} `json:"metadatas,omitempty"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// CreateCollectionJSONRequestBody defines body for CreateCollection for application/json ContentType.
type CreateCollectionJSONRequestBody = CreateCollection

// UpdateCollectionJSONRequestBody defines body for UpdateCollection for application/json ContentType.
type UpdateCollectionJSONRequestBody = UpdateCollection

// AddJSONRequestBody defines body for Add for application/json ContentType.
type AddJSONRequestBody = AddEmbedding

// DeleteJSONRequestBody defines body for Delete for application/json ContentType.
type DeleteJSONRequestBody = DeleteEmbedding

// GetJSONRequestBody defines body for Get for application/json ContentType.
type GetJSONRequestBody = GetEmbedding

// GetNearestNeighborsJSONRequestBody defines body for GetNearestNeighbors for application/json ContentType.
type GetNearestNeighborsJSONRequestBody = QueryEmbedding

// UpdateJSONRequestBody defines body for Update for application/json ContentType.
type UpdateJSONRequestBody = UpdateEmbedding

// UpsertJSONRequestBody defines body for Upsert for application/json ContentType.
type UpsertJSONRequestBody = AddEmbedding

// RawSqlJSONRequestBody defines body for RawSql for application/json ContentType.
type RawSqlJSONRequestBody = RawSql

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
